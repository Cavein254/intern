datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Position {
  INTERN
  EMPLOYER
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  position      Position  @default(INTERN)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  company Company[]
  job     Job[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id       String  @id @default(cuid())
  name     String  @unique
  address  String?
  email    String? @unique
  website  String? @unique
  location String?
  size     Int?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum JobType {
  PERMANENT
  TEMPORARY
  CONTRACT
  INTERNSHIP
}

enum LocationType {
  HYBRID
  ONSITE
  REMOTE
}

enum Engagement {
  FULLTIME
  PARTTIME
  PIECEWORK
}

model Job {
  id           String       @id @default(cuid())
  title     String
  jobType      JobType      @default(TEMPORARY)
  locationType LocationType @default(ONSITE)
  industry     String?
  engagement   Engagement   @default(FULLTIME)
  salary       String?
  description String?

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
